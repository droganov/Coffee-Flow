// Generated by CoffeeScript 1.4.0
(function() {

  jQuery.fn.extend({
    coffeeflow: function(options) {
      var Coffeeflow, CoffeeflowItem, j, log, settings;
      j = jQuery;
      settings = {
        blur: function(e) {
          return log("CoffeeFlow blured");
        },
        change: function(e) {
          return log("CoffeeFlow change");
        },
        ready: function(e) {
          return log("CoffeeFlow ready");
        },
        select: function(e) {
          return log("CoffeeFlow select");
        },
        focus: function(e) {
          return log("CoffeeFlow focused");
        },
        borderWidth: 2,
        debug: false,
        density: 3.2,
        firstItem: 2,
        minHeight: 200,
        selectOnChange: false
      };
      settings = j.extend(settings, options);
      log = function(msg) {
        if (settings.debug) {
          return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
        }
      };
      Coffeeflow = (function() {

        function Coffeeflow(el) {
          var arrange, canvas, container, currentItem, getState, i, item, items, ready, self, setState, stack, state, _i, _len,
            _this = this;
          self = this;
          state = "";
          container = j(el);
          currentItem = settings.firstItem;
          stack = [];
          canvas = j('<div class="coffeeflowCanvas"></div>');
          items = container.find("a");
          this.getCanvas = function() {
            return canvas;
          };
          this.getData = function() {
            return canvas.data();
          };
          this.getIndex = function() {
            return currentItem;
          };
          this.getItem = function(i) {
            if (i == null) {
              i = currentItem;
            }
            return stack[i];
          };
          this.resize = function() {
            var height;
            if (container.height() > settings.minHeight) {
              height = container.height();
            } else {
              height = settings.minHeight;
            }
            canvas.height(height);
            return arrange();
          };
          this.slideTo = function(i) {
            currentItem = i;
            arrange();
            settings.change(self);
            if (settings.selectOnChange) {
              return stack[i].select();
            }
          };
          arrange = function() {
            var depth, i, margin, x, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = stack.length; _i < _len; _i++) {
              i = stack[_i];
              i.resize();
              margin = canvas.height() / settings.density;
              if (_i === currentItem) {
                state = "current";
                depth = stack.length + 1;
                x = canvas.width() / 2;
              } else if (_i < currentItem) {
                state = "before";
                depth = _i;
                x = (canvas.width() / 2) - (margin / 2) - ((currentItem - _i) * margin);
              } else {
                state = "after";
                depth = stack.length - _i;
                x = (canvas.width() / 2) + (margin / 2) + ((_i - currentItem) * margin);
              }
              i.setDepth(depth);
              i.setState(state);
              _results.push(i.moveTo(x));
            }
            return _results;
          };
          getState = function() {
            return state;
          };
          ready = function() {
            canvas.addClass("ready");
            _this.resize();
            return settings.ready(self);
          };
          setState = function(state) {
            return state = state;
          };
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            i = items[_i];
            item = new CoffeeflowItem(i, _i, self);
            stack.push(item);
            item.appendTo(canvas);
          }
          container.append(canvas);
          this.resize();
          j(window).resize(function(e) {
            return _this.resize();
          });
          container.mouseover(function(e) {
            if (!container.is(".coffeeflowFocuse")) {
              container.addClass("coffeeflowFocuse");
              _this.resize();
              settings.focus(self);
            }
            return e.stopPropagation();
          });
          j("html").mouseover(function(e) {
            if (container.is(".coffeeflowFocuse")) {
              container.removeClass("coffeeflowFocuse");
              _this.resize();
              settings.blur(self);
              return e.stopPropagation();
            }
          });
          setTimeout(ready, 10);
        }

        return Coffeeflow;

      })();
      CoffeeflowItem = (function() {

        function CoffeeflowItem(el, i, p) {
          var align, img, select, self, state,
            _this = this;
          state = "";
          p = p;
          self = j(el).addClass("coffeeflowItem");
          img = self.find("img");
          self.css({
            top: settings.borderWidth + "px"
          });
          img.css({
            "border-width": settings.borderWidth + "px",
            margin: -settings.borderWidth + "px"
          });
          img.load(function(e) {
            return align();
          });
          self.click(function(e) {
            e.preventDefault();
            if (self.is(".current")) {
              return select();
            } else {
              return p.slideTo(i);
            }
          });
          this.appendTo = function(target) {
            return self.appendTo(target);
          };
          this.setDepth = function(depth) {
            return self.css("z-index", depth);
          };
          this.setState = function(newState) {
            self.removeClass("before");
            self.removeClass("current");
            self.removeClass("after");
            if (newState !== "current") {
              self.removeClass("selected");
            }
            self.addClass(newState);
            state = newState;
            return align();
          };
          this.moveTo = function(x) {
            x = x - (self.width() / 2);
            return self.css({
              left: x + "px"
            });
          };
          this.resize = function() {
            var h;
            h = p.getCanvas().height() - (settings.borderWidth * 2);
            return self.height(h).width(h);
          };
          align = function() {
            switch (state) {
              case "current":
                return img.css({
                  left: (self.height() - img.width()) / 2 + "px"
                });
              case "before":
                return img.css({
                  left: 0
                });
              case "after":
                return img.css({
                  right: 0
                });
            }
          };
          select = function() {
            self.addClass("selected");
            return settings.select(p);
          };
        }

        return CoffeeflowItem;

      })();
      return this.each(function() {
        return new Coffeeflow(this);
      });
    }
  });

}).call(this);
